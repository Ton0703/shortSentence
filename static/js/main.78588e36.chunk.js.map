{"version":3,"sources":["bg.js","components/Button.jsx","components/Box.jsx","App.js","serviceWorker.js","index.js"],"names":["bg","width","height","viewBox","fill","xmlns","d","Button","onClick","className","Box","text","App","useState","advice","set","ref","useRef","useEffect","current","scrollIntoView","behavior","e","preventDefault","axios","get","then","res","data","hitokoto","catch","err","console","log","map","item","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uOAuBeA,MArBf,WACE,OACE,yBACEC,MAAM,MACNC,OAAO,MACPC,QAAQ,cACRC,KAAK,OACLC,MAAM,8BAEN,0BACEC,EAAE,40BACFF,KAAK,YAEP,0BACEE,EAAE,ypCACFF,KAAK,Y,MCPEG,MARf,YAA8B,IAAZC,EAAW,EAAXA,QAChB,OACE,yBAAKC,UAAU,SAASD,QAASA,GAAjC,cCEWE,MAJf,YAAwB,IAATC,EAAQ,EAARA,KACb,OAAO,yBAAKF,UAAU,OAAOE,ICmChBC,MA/Bf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACNC,EADM,KACEC,EADF,KAEPC,EAAMC,iBAAO,MAanB,OAZAC,qBAAU,WACRF,EAAIG,QAAQC,eAAe,CAAEC,SAAU,aACtC,CAACP,IAWF,yBAAKL,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQD,QAbM,SAACc,GACnBA,EAAEC,iBACFC,IACGC,IAAI,8BACJC,MAAK,SAACC,GACLZ,EAAI,GAAD,mBAAKD,GAAL,CAAaa,EAAIC,KAAKC,eAE1BC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,SAO1B,yBAAKtB,UAAU,SACZK,EAAOoB,KAAI,SAACC,EAAMC,GAAP,OACV,kBAAC,EAAD,CAAKzB,KAAMwB,EAAME,IAAKD,OAExB,yBAAKpB,IAAKA,QCnBAsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.78588e36.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction bg() {\r\n  return (\r\n    <svg\r\n      width=\"363\"\r\n      height=\"728\"\r\n      viewBox=\"0 0 363 728\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        d=\"M363 172.947H359.001V63.4019C359.001 55.0758 357.361 46.8313 354.175 39.139C350.989 31.4467 346.319 24.4573 340.431 18.5699C334.544 12.6825 327.554 8.01237 319.862 4.82613C312.17 1.6399 303.925 -2.62641e-05 295.599 3.15475e-10H63.513C55.187 -1.9698e-05 46.942 1.6399 39.25 4.82614C31.5575 8.01238 24.5681 12.6825 18.6807 18.5699C12.7933 24.4574 8.12311 31.4467 4.93691 39.139C1.75061 46.8313 0.110718 55.0758 0.110718 63.4019V664.376C0.110718 672.702 1.75061 680.947 4.93691 688.639C8.12311 696.331 12.7933 703.321 18.6807 709.208C24.5681 715.096 31.5575 719.766 39.25 722.952C46.942 726.138 55.187 727.778 63.513 727.778H295.599C303.925 727.778 312.17 726.138 319.862 722.952C327.554 719.766 334.544 715.096 340.431 709.208C346.319 703.321 350.989 696.331 354.175 688.639C357.361 680.947 359.001 672.702 359.001 664.376V250.923H363V172.947Z\"\r\n        fill=\"#3F3D56\"\r\n      />\r\n      <path\r\n        d=\"M298.157 16.495H267.862C269.256 19.9106 269.787 23.6165 269.411 27.286C269.035 30.9556 267.762 34.4763 265.704 37.538C263.646 40.5997 260.867 43.1084 257.612 44.8431C254.356 46.5778 250.724 47.4852 247.035 47.4855H114.076C110.387 47.4852 106.755 46.5778 103.499 44.8431C100.244 43.1084 97.465 40.5997 95.407 37.538C93.35 34.4763 92.077 30.9556 91.7 27.286C91.324 23.6164 91.856 19.9106 93.249 16.4949H64.953C58.735 16.4949 52.578 17.7196 46.834 20.099C41.089 22.4785 35.87 25.9661 31.4732 30.3627C27.0765 34.7594 23.5889 39.979 21.2095 45.7235C18.83 51.468 17.6053 57.6249 17.6053 63.8427V663.935C17.6053 670.153 18.83 676.31 21.2095 682.054C23.5889 687.799 27.0765 693.019 31.4732 697.415C35.87 701.812 41.089 705.299 46.834 707.679C52.578 710.058 58.735 711.283 64.953 711.283H298.157C304.375 711.283 310.532 710.058 316.277 707.679C322.021 705.299 327.241 701.812 331.637 697.415C336.034 693.019 339.522 687.799 341.901 682.054C344.281 676.31 345.505 670.153 345.505 663.935V63.8427C345.505 57.6249 344.281 51.468 341.901 45.7235C339.522 39.979 336.034 34.7594 331.637 30.3628C327.241 25.9661 322.021 22.4785 316.277 20.0991C310.532 17.7196 304.375 16.495 298.157 16.495Z\"\r\n        fill=\"white\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default bg;\r\n","import React from \"react\";\r\n\r\nfunction Button({ onClick }) {\r\n  return (\r\n    <div className=\"button\" onClick={onClick}>\r\n      Click Me!\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nfunction Box({ text }) {\r\n  return <div className=\"box\">{text}</div>;\r\n}\r\n\r\nexport default Box;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Phone from \"./bg\";\r\nimport \"./App.css\";\r\nimport Button from \"./components/Button\";\r\nimport Box from \"./components/Box\";\r\n\r\nfunction App() {\r\n  const [advice, set] = useState([]);\r\n  const ref = useRef(null);\r\n  useEffect(() => {\r\n    ref.current.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [advice]);\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .get(\"https://v1.hitokoto.cn?c=d\")\r\n      .then((res) => {\r\n        set([...advice, res.data.hitokoto]);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <Phone />\r\n        <Button onClick={handleClick} />\r\n        <div className=\"lists\">\r\n          {advice.map((item, index) => (\r\n            <Box text={item} key={index} />\r\n          ))}\r\n          <div ref={ref}></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}